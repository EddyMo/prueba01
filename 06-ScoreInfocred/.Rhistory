rm(list = ls())
library(openxlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(GoodmanKruskal)
library(FSelector)
library(scorecard)
setwd('D://DatosBGA//ScoreAdmisionTarjetas//04-PreparacionDatos')
options(scipen=999)
#### 1. Se importan las operaciones etiquetadas ####
datos <- read.csv("D://DatosBGA//ScoreAdmisionTarjetas//02-DatosAdmision//tarjetaDatosEtiquetadosConSaldos18meses90dias.csv", sep = "|", dec = ".", stringsAsFactors = FALSE)
colsFactor <- c("ESTADO_CIVIL", "NIVEL_EDUCACION", "CARGO", "TIPO_VIVIENDA", "GENERO", "FUENTE_INGRESO", "SECTOR_ECONOMICO", "COD_PROFESION", "PROFESION", "SUCURSAL", "DEPARTAMENTO", "CAEDEC", "GRUPO_CAEDEC", "NIVEL_INGRESO", "PRODUCTO", "DESC_PRODUCTO", "TIPO_OPR", "FORMA_PAGO", "SEGMENTO", "DEFAULT","MONEDA")
datos[colsFactor] <- lapply(datos[colsFactor], factor)
# str(datos)
# table(datos$DEFAULT)
# datos %>% select(MONTO_OPERACION,MONEDA,MONTO_DES_ORI) %>% head(500)
# datos %>% select(MONEDA) %>% distinct()
# datos %>% select(TC_USD,TC_FECHA_OP) %>% distinct()
#### 2. Identificadores de atributos ID que no aportan al modelado ####
# Se eliminan identificadores o redundantes
datos <- datos %>% mutate(
JTS_OID_SALDOS = NULL,
# Se comentan los 4 atributos siguientes para la verificación de Scores de Buro
# NRO_SOLICITUD = NULL,
# CODIGO_CLIENTE = NULL,
# NRO_PERSONA = NULL,
# FECHA_INICIO = NULL, # 388 valores
TC_USD = NULL, # Dato para transformacion
TC_FECHA_OP = NULL,
MONEDA = NULL,
SEGMENTO = NULL # porque solo tiene el valor "TARJETA"
# MONTO_OPERACION = MONTO_DES_ORI,
# PROFESION = NULL, # Redundante con "COD_PROFESION"
# # SUCURSAL = NULL, # Puede considerarse un Identificador
# CAEDEC = NULL, # Solo tiene 2 valores: "22210", "52111"
# GRUPO_CAEDEC = NULL, # Solo tiene 2 valores: "ACTIVIDADES DE IMPRESION", "VENTA AL POR MENOR EN SUPERMERCADOS CON"
# OPERACION = NULL
)
# %>% mutate(
#   MONTO_DES_ORI = NULL
# )
# str( datos )
#### 3. Construcción de datos ####
# Se agrega un indicador entre pasivos y activos, apalancamiento
datos <- datos %>% mutate( PASIVO_ACTIVO = ifelse( TOT_ACTIVOS > 0 , round(TOT_PASIVOS / TOT_ACTIVOS,2) , 0 )  )
# Se transforma el MONTO_OPERACION en bolivianos
# datos  %>% group_by(MONTO_DES_ORI) %>% summarise( numOps = n() ) %>% arrange( MONTO_DES_ORI, numOps ) %>% as.data.frame()
datos <- datos %>% mutate( MONTO_OPERACION = MONTO_DES_ORI ) %>% mutate( MONTO_DES_ORI = NULL )
#### 4. Identificación de Redundancia semántica de datos ####
# Redundancia semántica de DIAS_PLAZO y NRO_CUOTAS (todos entorno a los 60 y 61 meses o menores a 0)
# datos %>% group_by( DIAS_PLAZO ) %>% summarise( n() ) %>% arrange( DIAS_PLAZO ) %>% as.data.frame()
# datos %>% mutate( MESES_PLAZO = round(DIAS_PLAZO / 30.4375 , 1 ) ) %>% group_by( MESES_PLAZO ) %>% summarise( n() ) %>% as.data.frame()
# cor(datos$DIAS_PLAZO, datos$NRO_CUOTAS)
datos <- datos %>% mutate( DIAS_PLAZO = NULL, MESES_PLAZO = NULL )
# Redundancia semántica de COD_PROFESION y PROFESION
# datos %>% group_by(COD_PROFESION,PROFESION) %>% summarise( numOp = n() ) %>%  arrange( desc(numOp), COD_PROFESION,PROFESION) %>% as.data.frame()
# datos %>% group_by(COD_PROFESION, DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( desc(COD_PROFESION), numOp) %>% as.data.frame()
datos <- datos %>% mutate( PROFESION = NULL )
# Redundancia semántica de CAEDEC y GRUPO_CAEDEC (por capacidad de discriminación todos en: CAEDEC = 52111)
# datos %>% group_by(CAEDEC,GRUPO_CAEDEC, DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( desc(numOp), CAEDEC,GRUPO_CAEDEC) %>% as.data.frame()
# datos %>% group_by(CAEDEC, DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( desc(numOp), CAEDEC) %>% as.data.frame()
datos <- datos %>% mutate( GRUPO_CAEDEC = NULL, CAEDEC = NULL )
# Redundancia semántica de PRODUCTO y DESC_PRODUCTO
# datos %>% group_by(PRODUCTO,DESC_PRODUCTO) %>% summarise( numOp = n() ) %>%  arrange( desc(numOp), PRODUCTO,DESC_PRODUCTO) %>% as.data.frame()
# datos %>% group_by(PRODUCTO,DESC_PRODUCTO, DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( PRODUCTO,DESC_PRODUCTO, DEFAULT) %>% as.data.frame()
datos <- datos %>% mutate( PRODUCTO = NULL, DESC_PRODUCTO = NULL )
# Redundancia semántica de DEPARTAMENTO y SUCURSAL
# datos %>% group_by(DEPARTAMENTO,SUCURSAL) %>% summarise( numOp = n() ) %>%  arrange( DEPARTAMENTO,SUCURSAL,numOp) %>% as.data.frame()
# datos %>% group_by(DEPARTAMENTO,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( DEPARTAMENTO,DEFAULT,numOp) %>% as.data.frame()
datos <- datos %>% mutate( SUCURSAL = NULL )
# Capacidad de discriminación de FRECUENCIA_PAGO (los valores son solo 0 y 30)
# datos %>% group_by( FRECUENCIA_PAGO ) %>% summarise( numOps = n() ) %>% arrange( FRECUENCIA_PAGO )
# datos %>% group_by( FRECUENCIA_PAGO,DEFAULT ) %>% summarise( numOps = n() ) %>% arrange( FRECUENCIA_PAGO,DEFAULT ) %>% as.data.frame()
datos <- datos %>% mutate( FRECUENCIA_PAGO = NULL )
#### 5. Evaluación de la capacidad de discriminación de datos numéricos ####
# Capacidad de discriminación de CREDITOS_VENCIDOS_BGA
# datos %>% group_by(CREDITOS_VENCIDOS_BGA,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( CREDITOS_VENCIDOS_BGA,numOp) %>% as.data.frame()
datos <- datos %>% mutate( CREDITOS_VENCIDOS_BGA = NULL )
# Capacidad de discriminación de CANTIDAD_HIJOS
datos %>% group_by(CANTIDAD_HIJOS,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( CANTIDAD_HIJOS,numOp) %>% as.data.frame()
grafCANTIDAD_HIJOS <- datos %>% group_by(CANTIDAD_HIJOS,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafCANTIDAD_HIJOS %>% filter(CANTIDAD_HIJOS < 10), aes(fill=DEFAULT, y=numOp, x=CANTIDAD_HIJOS)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de NRO_CODEUDORES
datos %>% group_by(NRO_CODEUDORES,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( NRO_CODEUDORES,numOp) %>% as.data.frame()
grafNRO_CODEUDORES <- datos %>% group_by(NRO_CODEUDORES,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafNRO_CODEUDORES, aes(fill=DEFAULT, y=numOp, x=NRO_CODEUDORES)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
#### 6. Evaluación de la capacidad de discriminación de datos categóricos ####
# Capacidad de discriminación de ESTADO_CIVIL
datos %>% group_by(ESTADO_CIVIL,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( ESTADO_CIVIL,numOp) %>% as.data.frame()
grafESTADO_CIVIL <- datos %>% group_by(ESTADO_CIVIL,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafESTADO_CIVIL, aes(fill=DEFAULT, y=numOp, x=ESTADO_CIVIL)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de NIVEL_EDUCACION
datos %>% group_by(NIVEL_EDUCACION,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( NIVEL_EDUCACION,numOp) %>% as.data.frame()
grafNIVEL_EDUCACION <- datos %>% group_by(NIVEL_EDUCACION,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafNIVEL_EDUCACION, aes(fill=DEFAULT, y=numOp, x=NIVEL_EDUCACION)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de CARGO
datos %>% group_by(CARGO,DEFAULT) %>% summarise( numOp = n() ) %>%  arrange( CARGO,numOp) %>% as.data.frame()
grafCARGO <- datos %>% group_by(CARGO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafCARGO, aes(fill=DEFAULT, y=numOp, x=CARGO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de TIPO_VIVIENDA
grafTIPO_VIVIENDA <- datos %>% group_by(TIPO_VIVIENDA,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafTIPO_VIVIENDA, aes(fill=DEFAULT, y=numOp, x=TIPO_VIVIENDA)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de GENERO
grafGENERO <- datos %>% group_by(GENERO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafGENERO, aes(fill=DEFAULT, y=numOp, x=GENERO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de FUENTE_INGRESO
grafFUENTE_INGRESO <- datos %>% group_by(FUENTE_INGRESO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafFUENTE_INGRESO, aes(fill=DEFAULT, y=numOp, x=FUENTE_INGRESO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
datos <- datos %>% mutate( FUENTE_INGRESO = NULL )
# Capacidad de discriminación de SECTOR_ECONOMICO
grafSECTOR_ECONOMICO <- datos %>% group_by(SECTOR_ECONOMICO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafSECTOR_ECONOMICO, aes(fill=DEFAULT, y=numOp, x=SECTOR_ECONOMICO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de DEPARTAMENTO
grafDEPARTAMENTO <- datos %>% group_by(DEPARTAMENTO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafDEPARTAMENTO, aes(fill=DEFAULT, y=numOp, x=DEPARTAMENTO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de NIVEL_INGRESO
grafNIVEL_INGRESO <- datos %>% group_by(NIVEL_INGRESO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafNIVEL_INGRESO, aes(fill=DEFAULT, y=numOp, x=NIVEL_INGRESO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de TIPO_OPR
grafTIPO_OPR <- datos %>% group_by(TIPO_OPR,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafTIPO_OPR, aes(fill=DEFAULT, y=numOp, x=TIPO_OPR)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
datos <- datos %>% mutate( TIPO_OPR = NULL )
# Capacidad de discriminación de FORMA_PAGO
grafFORMA_PAGO <- datos %>% group_by(FORMA_PAGO,DEFAULT) %>% summarise( numOp = n() )
ggplot(grafFORMA_PAGO, aes(fill=DEFAULT, y=numOp, x=FORMA_PAGO)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de CUOTA_ING_NETO
(grafCUOTA_ING_NETO <- datos %>% group_by(CUOTA_ING_NETO,DEFAULT) %>% summarise( numOp = n() ))
datos <- datos %>% mutate( CUOTA_ING_NETO = NULL )
# Capacidad de discriminación de CANTIDAD_HIJOS
(grafCANTIDAD_HIJOS <- datos %>% filter( CANTIDAD_HIJOS < 10 ) %>% group_by(CANTIDAD_HIJOS,DEFAULT) %>% summarise( numOp = n() ))
ggplot(grafCANTIDAD_HIJOS, aes(fill=DEFAULT, y=numOp, x=CANTIDAD_HIJOS)) + geom_bar(position="fill", stat="identity") + scale_fill_manual("Default", values = c("0" = "blue", "1" = "red"))
# Capacidad de discriminación de NRO_CUOTAS
# datos %>% group_by(NRO_CUOTAS,DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% mutate( NRO_CUOTAS = NULL )
#### 7. Datos ausentes ####
# sapply(datos, function(x) sum(is.na(x)))
# datos %>% nrow()
# datos %>% filter( is.na(SALDO), DEFAULT == "0" ) %>% nrow()
# datos %>% filter( is.na(NRO_MES_DEFAULT), DEFAULT == "0" ) %>% nrow()
#### 8. Identificación de datos numéricos anómalos ####
# str(datos)
columnasNum <- c("EDAD", "ANTIGUEDAD_LABORAL", "MONTO_OPERACION", "INGRESOS_GASTOS", "CANTIDAD_HIJOS", "TOT_ACTIVOS", "TOT_PASIVOS", "NRO_CODEUDORES", "PASIVO_ACTIVO")
columnasCat <- colnames(datos)[!colnames(datos) %in% c(columnasNum, "DEFAULT", "NRO_SOLICITUD", "CODIGO_CLIENTE", "NRO_PERSONA", "OPERACION","SALDO","NRO_MES_DEFAULT","FECHA_INICIO")]
graficoBoxPlot <- function( col ) {
plt <- ggplot(data = datos[,c(col,"DEFAULT")], aes(y = datos[,c(col)] , x = DEFAULT, fill = DEFAULT)) +
geom_boxplot() + scale_fill_manual(values=c("green","red")) +
theme(legend.position="none", axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(col) + xlab("Default")
plotBoxPlot <- plt
}
listaBoxPlot <- list()
for( col in columnasNum) { listaBoxPlot[[col]] <- graficoBoxPlot(col) }
listaBoxPlot[["EDAD"]] # outliers: 432V, 45 ; > 62
listaBoxPlot[["MONTO_OPERACION"]] # outliers: 1474V, 22D ; > 15000 | < 1000
listaBoxPlot[["INGRESOS_GASTOS"]] # outliers: 397V, 3D ; > 7
listaBoxPlot[["CANTIDAD_HIJOS"]] # outliers: 6V ; > 4
listaBoxPlot[["TOT_ACTIVOS"]] # outliers: 1361V, 12D ; > 70000
listaBoxPlot[["TOT_PASIVOS"]] #  outliers: 129V, 2D ; > 30000
listaBoxPlot[["NRO_CODEUDORES"]] # nivel de discriminación poco significativo (solo 1 caso en Default con NRO_CODEUDORES = 2)
listaBoxPlot[["PASIVO_ACTIVO"]] # outliers: 7V ; > 1
listaBoxPlot[["ANTIGUEDAD_LABORAL"]] # outliers: 1086V, 51D ; > 10
# table(datos$DEFAULT)
# datos %>% filter( EDAD > 62 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( EDAD <= 62 )
# datos %>% filter( MONTO_OPERACION <= 1000 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
# datos %>% filter( MONTO_OPERACION > 15000 | MONTO_OPERACION < 1000 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( MONTO_OPERACION <= 15000 & MONTO_OPERACION >= 1000 )
# datos %>% filter( INGRESOS_GASTOS > 7 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( INGRESOS_GASTOS <= 7 )
# datos %>% filter( CANTIDAD_HIJOS > 4 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( CANTIDAD_HIJOS <= 4 )
# datos %>% filter( TOT_ACTIVOS > 70000 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( TOT_ACTIVOS <= 70000 )
# datos %>% filter( TOT_PASIVOS < 0 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
# datos %>% filter( TOT_PASIVOS > 30000 | TOT_PASIVOS < 0 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( TOT_PASIVOS <= 30000 , TOT_PASIVOS >= 0 )
# datos %>% group_by(NRO_CODEUDORES, DEFAULT) %>% summarise( numOps = n()) %>% arrange(NRO_CODEUDORES, DEFAULT)
# datos %>% filter( PASIVO_ACTIVO > 1 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( PASIVO_ACTIVO <= 1 )
# datos %>% filter( ANTIGUEDAD_LABORAL > 10 ) %>% select(DEFAULT, ANTIGUEDAD_LABORAL) %>% group_by(ANTIGUEDAD_LABORAL, DEFAULT) %>% summarise( numOps = n() ) %>% as.data.frame()
# datos %>% filter( ANTIGUEDAD_LABORAL > 10 ) %>% group_by(DEFAULT) %>% summarise( numOp = n() )
datos <- datos %>% filter( ANTIGUEDAD_LABORAL <= 10 )
# SALDO y MONTO_OPERACION (3 outliers)
# datos %>% filter( SALDO > MONTO_OPERACION )
# datos %>% filter( is.na(COD_PROFESION) )
datos <- datos %>% filter( is.na(SALDO) | SALDO <= MONTO_OPERACION )
datos <- datos %>% filter( !is.na(COD_PROFESION) )
#### 9. Análisis de correlación ####
# Correlación numérica
(CNumMatrix <- round(cor(datos[,columnasNum]),2))
corrplot(CNumMatrix, type = "upper", tl.col = "black", tl.srt = 35, use = "complete.obs")
#TOT_PASIVO - PASIVO_ACTIVO (0.79) ; TOT_ACTIVOS - TOT_PASIVOS (0.44) ; EDAD - TOT_ACTIVOS (0.19) ; EDAD - CANTIDAD_HIJOS (0.25) ; CANTIDAD_HIJOS - TOT_ACTIVOS (0.20) ; TOT_ACTIVOS - TOT_PASIVOS (0.19)
(CNumMatrix2 <- round(cor(datos[,c("EDAD","CANTIDAD_HIJOS","TOT_ACTIVOS","TOT_PASIVOS", "PASIVO_ACTIVO")]),2))
corrplot(CNumMatrix2, type = "upper", tl.col = "black", tl.srt = 35, use = "complete.obs")
# Correlación categórica
(GKmatrix1 <- GKtauDataframe(datos[,columnasCat]))
plot(GKmatrix1, corrColors = "blue", diagSize = 0.5,  dgts = 1)
# COD_PROFESION - NIVEL_EDUCACION (0.58) ; COD_PROFESION - GENERO (0.214)
(GKmatrix2 <- GKtauDataframe(datos[,c("NIVEL_EDUCACION", "COD_PROFESION","GENERO")]))
plot(GKmatrix2, corrColors = "blue", diagSize = 0.5,  dgts = 1)
#### 10. Verificación de la relevancia de los atributos ####
dataPrep <- datos[,colnames(datos)[! colnames(datos) %in% c("OPERACION","NRO_SOLICITUD", "CODIGO_CLIENTE", "NRO_PERSONA", "FECHA_INICIO", "SALDO", "NRO_MES_DEFAULT") ] ]
dataPrepVMcols <- c()
# dataPrep <- vistaMinable[,colnames(vistaMinable)[! colnames(vistaMinable) %in% c("OPERACION") ] ]
# dataPrepVMcols <- c("log_EDAD", "log_MONTO_OPERACION", "log_INGRESOS_GASTOS", "log_CUOTA_ING_NETO", "log_TOT_ACTIVOS")
# str(dataPrep)
set.seed(1234)
relevanciaGen <- data.frame(
columna =  row.names(chi.squared(DEFAULT~., dataPrep)),
chi.squared = round( chi.squared(DEFAULT~., dataPrep)$attr_importance ,4),
information.gain = round( information.gain(DEFAULT~., dataPrep)$attr_importance ,4),
gain.ratio = round( gain.ratio(DEFAULT~., dataPrep)$attr_importance ,4),
symmetrical.uncertainty = round( symmetrical.uncertainty(DEFAULT~., dataPrep)$attr_importance ,4)
)
# dataPrep$DEFAULT <- as.numeric(dataPrep$DEFAULT)
set.seed(1234)
relevanciaNum <- data.frame(
columna =  row.names(chi.squared(DEFAULT~., dataPrep[,c(columnasNum,"DEFAULT", dataPrepVMcols)])),
linear.correlation = round( linear.correlation(DEFAULT~., (dataPrep %>% mutate( DEFAULT = as.numeric(DEFAULT) ) %>% select( c("DEFAULT",columnasNum, dataPrepVMcols) ) ))$attr_importance ,4),
rank.correlation = round( rank.correlation(DEFAULT~., (dataPrep %>% mutate( DEFAULT = as.numeric(DEFAULT) ) %>% select( c("DEFAULT",columnasNum, dataPrepVMcols) ) ))$attr_importance ,4)
)
relevanciaIV <- iv(datos[,c(columnasCat,"DEFAULT")], "DEFAULT", x = columnasCat, positive = "1", order = TRUE)
relevanciaIV <- relevanciaIV %>% mutate(columna = variable, info_value = round(info_value,4) ) %>% mutate(variable = NULL)
relevancia <- left_join(relevanciaGen , relevanciaNum, by = c("columna")) %>% mutate( linear.correlation = ifelse( is.na(linear.correlation), 0, linear.correlation ), rank.correlation = ifelse( is.na(rank.correlation), 0, rank.correlation ) )
left_join(relevancia , relevanciaIV, by = c("columna")) %>% mutate( info_value = ifelse( is.na(info_value), 0.0000, info_value ) )
#### 11. Se guardan los datos preparados ####
# table(datos$DEFAULT)
vistaMinable <- datos %>%
# select( -OPERACION ) %>%
mutate(
log_EDAD = log(EDAD),
log_MONTO_OPERACION = log(MONTO_OPERACION),
log_INGRESOS_GASTOS = log(INGRESOS_GASTOS)
# , log_TOT_ACTIVOS = log(TOT_ACTIVOS)
)
# # str(vistaMinable)
write.table(vistaMinable %>% select(-one_of(c("NRO_SOLICITUD","CODIGO_CLIENTE","NRO_PERSONA","NRO_MES_DEFAULT"))),
file = "TarjetaVistaMinable_18meses90dias_Iteracion_7.csv", sep = ";", dec = ".", quote = FALSE, row.names = FALSE, na = "")
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(ggplot2)
rm(list = ls())
dirWD <- "D://DatosBGA//ScoreAdmisionTarjetas//06-ScoreInfocred"
setwd(dirWD)
# Datos de personas ASFI
load("datosPersonaAsfi.RData")
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(ggplot2)
rm(list = ls())
dirWD <- "D://DatosBGA//ScoreAdmisionTarjetas//06-ScoreInfocred"
setwd(dirWD)
####	1. Se recuperan los datos de personas de los datos ASFI ####
load("datosPersonaAsfi.RData")
# Datos de operaciones de vista minable
datosTarjetas <- read.csv( file = "D://DatosBGA//ScoreAdmisionTarjetas//02-DatosAdmision//tarjetaDatosEtiquetadosConSaldos36meses90dias.csv", sep = "|", dec = ".", stringsAsFactors = FALSE)
datosCIclientesTarjetas <- datosTarjetas %>%
# filter( CODIGO_CLIENTE %in% datosPersonaAsfi$CODIGO_CLIENTE | OPERACION %in% datosPersonaAsfi$NRO_OP ) %>%
select( OPERACION, CODIGO_CLIENTE, NRO_PERSONA, FECHA_INICIO ) %>% distinct()
datosCIclientesTarjetas <- datosCIclientesTarjetas %>%
left_join( datosPersonaAsfi %>% mutate(OPERACION = NRO_OP) %>% group_by(OPERACION) %>% summarise( IDENTIFICACION = min(IDENTIFICACION), NOMBRE = min(NOMBRE) ) #, FECHA_OP = min(FECHA_OP)
, by = "OPERACION")
datosCIclientesTarjetas <- datosCIclientesTarjetas %>%
left_join( datosPersonaAsfi %>% group_by(CODIGO_CLIENTE) %>% summarise( IDENTIFICACION = min(IDENTIFICACION), NOMBRE = min(NOMBRE) ) #, FECHA_OP = min(FECHA_OP)
, by = "CODIGO_CLIENTE") %>%
mutate( IDENTIFICACION = ifelse( !is.na(IDENTIFICACION.x), IDENTIFICACION.x, IDENTIFICACION.y ),
NOMBRE = ifelse( !is.na(NOMBRE.x), NOMBRE.x, NOMBRE.y ) #, FECHA_OP = coalesce(FECHA_OP.x,FECHA_OP.y)
) %>%
select(OPERACION, CODIGO_CLIENTE, NRO_PERSONA, FECHA_INICIO, IDENTIFICACION, NOMBRE)
datosCIclientesTarjetas <- datosCIclientesTarjetas %>%
mutate(
DOC_NRO = case_when(grepl("LP",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"LP",""), grepl("SC",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"SC",""), grepl("CB",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"CB",""), grepl("BE",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"BE",""), grepl("TJ",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"TJ",""), grepl("CH",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"CH",""), grepl("OR",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"OR",""), grepl("PA",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"PA",""), grepl("PO",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"PO",""), grepl("PE",IDENTIFICACION) ~ str_replace(IDENTIFICACION,"PE",""), TRUE ~ IDENTIFICACION ),
DOC_EXT = case_when(grepl("LP",IDENTIFICACION) ~ "LP", grepl("SC",IDENTIFICACION) ~ "SC", grepl("CB",IDENTIFICACION) ~ "CB", grepl("BE",IDENTIFICACION) ~ "BE", grepl("TJ",IDENTIFICACION) ~ "TJ", grepl("CH",IDENTIFICACION) ~ "CH", grepl("OR",IDENTIFICACION) ~ "OR", grepl("PA",IDENTIFICACION) ~ "PA", grepl("PO",IDENTIFICACION) ~ "PO", grepl("PE",IDENTIFICACION) ~ "PE", TRUE ~ IDENTIFICACION )
)
for(i in 1:nrow(datosCIclientesTarjetas)) {
if( grepl("-", datosCIclientesTarjetas[i,c("IDENTIFICACION")] ) ) {
datosCIclientesTarjetas[i,c("DOC_NRO")] <- str_split( datosCIclientesTarjetas[i,c("IDENTIFICACION")] , "-")[[1]][[1]]
datosCIclientesTarjetas[i,c("DOC_EXT")] <- paste0("-", str_split( datosCIclientesTarjetas[i,c("IDENTIFICACION")] , "-")[[1]][[2]] )
}
}
write.table(datosCIclientesTarjetas, file = "datosCIclientesTarjetas.csv", sep = "|", dec = ".", na = "", quote = FALSE, row.names = FALSE)
datosInfocred <- read.csv( file = "datosCIclientesInfocred.csv", sep = ";", dec = ".", stringsAsFactors = FALSE)
funDocBuro <- function( cadena ) {
iniChar <- gregexpr("[[:alpha:]]+", cadena)[[1]][1]
finChar <- attr(gregexpr("[[:alpha:]]+", cadena)[[1]],"match.length")[1]
if( iniChar > -1) {
if( grepl("BGA", cadena ) ) {
finDocBuro <- c( str_replace_all( cadena, "BGA", "" ) , "BGA" )
} else if( grepl("LP", cadena ) ) {
finDocBuro <- c( str_replace_all( cadena, "LP", "" ) , "LP" )
} else if( grepl("SC", cadena ) ) {
finDocBuro <- c( str_replace_all( cadena, "SC", "" ) , "SC" )
} else {
iniNum <- gregexpr("[[:digit:]]+", cadena)[[1]][1]
finNum <- attr(gregexpr("[[:digit:]]+", cadena)[[1]],"match.length")[1]
finDocBuro <- c( substr(cadena, iniNum, iniNum+finNum-2) , substr(cadena, iniChar-1, iniChar+finChar) )
}
} else {
finDocBuro <- c(cadena,"")
}
}
for (i in 1:nrow(datosInfocred)) {
res <- funDocBuro(datosInfocred[i,c("DocumentoIdentidad")])
datosInfocred[i,c("DocumentoIdentidad")] <- res[1]
datosInfocred[i,c("Extension")] <- paste0(res[2],datosInfocred[i,c("Extension")])
}
cruceDatosTarjetasInfocred <- datosCIclientesTarjetas %>% left_join(
datosInfocred %>% mutate( DOC_NRO = DocumentoIdentidad, icExt = Extension, icNombre = NombreCompletoTitular, icScore = Score, icPred = Pred, icProb = Prob ) %>% select(DOC_NRO, icExt, icNombre, icScore, icPred, icProb ),
by = "DOC_NRO"
) %>% filter( !is.na(icScore) ) %>% select(OPERACION, icScore, icPred, icProb)
criterioDuplicados <- cruceDatosTarjetasInfocred %>% group_by( OPERACION ) %>% summarise( numReg = n(), scoreMenor = min(icScore) ) %>% filter( numReg > 1 )
indexDrop <- c()
for( j in 1:nrow(criterioDuplicados) ) {
for ( i in 1:nrow(cruceDatosTarjetasInfocred) ) {
dupOperacion <- criterioDuplicados[j,c("OPERACION")]
dupScoreMenor <- criterioDuplicados[j,c("scoreMenor")]
regOperacion <- cruceDatosTarjetasInfocred[i,c("OPERACION")]
regIcScore <- cruceDatosTarjetasInfocred[i,c("icScore")]
if( regOperacion == dupOperacion ) {
if ( regIcScore != dupScoreMenor ) {
indexDrop <- c(indexDrop,i)
}
}
}
}
cruceDatosTarjetasInfocred <- cruceDatosTarjetasInfocred[-indexDrop,]
write.table( cruceDatosTarjetasInfocred, file("relacionTarjetasInfocred.csv"), sep = ";", quote = FALSE, row.names = FALSE)
