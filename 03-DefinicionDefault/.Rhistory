"log_INGRESOS_GASTOS"
, "log_EDAD" , "log_MONTO_OPERACION" #, "MONTO_OPERACION" , "EDAD"
, "PASIVO_ACTIVO" #, "NIVEL_EDUCACION"
)
col_capacidad <- c("TIPO_VIVIENDA", "TOT_PASIVOS", "ESTADO_CIVIL", "CARGO")
ds_Train <- ds_Train_base[, colnames(ds_Train_base)[!colnames(ds_Train_base) %in% c(col_bajaRelevancia, col_colinealidad, col_capacidad,"OPERACION","FECHA_INICIO","SALDO","SECTOR_ECONOMICO","FORMA_PAGO")]] #
# str(ds_Train)
# str(ds_Train_base)
# str(ds_Test)
# Generación del conjunto de datos para modelado (WOE de cada atributo)
train <- woebin_ply(ds_Train, bins)
# str(train)
#### Modelo de datos ####
modelBase <- glm(DEFAULT ~ ., family = "binomial", data = train)
m_step <- step(modelBase, direction="both", trace=FALSE)
# model <- eval(m_step$call)
model <- eval(modelBase)
#### Validación ####
# Training Test
pred_train_log <- predict(model, newdata = train, type='response')
pred_train_obj <- prediction(pred_train_log, train$DEFAULT)
perform_train <- performance(pred_train_obj, measure = "phi", x.measure = "cutoff")
plot(perform_train)
# range(pred_train_log)
auc(train$DEFAULT,pred_train_log)
plot(performance(pred_train_obj, measure = "tpr", x.measure = "fpr"))
cutoff <- perform_train@x.values[[1]][which.max(perform_train@y.values[[1]])]
pred_train <- ifelse(pred_train_log > cutoff, 1, 0)
(cm <- caret::confusionMatrix(as.factor(pred_train), train$DEFAULT, positive = "1"))
# data.frame(real = train$DEFAULT, pred = pred_train, prob = pred_train_log) %>% filter( real == 0, pred == 1 )
# Prediccion Test
test <- woebin_ply(ds_Test, bins)
test <- as.data.frame(test) %>% mutate_all(~replace(., is.na(.), 0))
pred_test_log <- predict(model, newdata = test, type='response')
pred_test_obj <- prediction(pred_test_log, test$DEFAULT)
pred_test <- ifelse(pred_test_log > cutoff, 1, 0)
(cm <- caret::confusionMatrix(as.factor(pred_test), test$DEFAULT, positive = "1"))
# Función para generar métricas
ResultadoGrupoMes <- function(dataBase, clasePos){
claseNeg <- ifelse(clasePos == "1","0","1")
numReg <- dataBase %>% nrow()
if(numReg > 0){
data2 <- dataBase
data2$Pred <- as.factor(data2$Pred)
data2$Real <- as.factor(data2$Real)
cm <- confusionMatrix(data2$Pred, data2$Real, positive = clasePos)
#Datos de la matriz de confusión
nTot <- sum(cm$table)
nPos <- sum(cm$table[,clasePos])
nNeg <- sum(cm$table[,claseNeg])
pPos <- round((nPos / nTot), digits = 4)
pNeg <- round((nNeg / nTot), digits = 4)
vp <- as.numeric(cm$table[clasePos,clasePos])
vn <- as.numeric(cm$table[claseNeg,claseNeg])
fp <- as.numeric(cm$table[clasePos,claseNeg])
fn <- as.numeric(cm$table[claseNeg,clasePos])
#Metricas tradicionales
accuracy <- cm$overall["Accuracy"]
err <- (fp+fn)/(vp+fn+vn+fp)
sensitivity <- cm$byClass["Sensitivity"] #igual a recall
specificity <- cm$byClass["Specificity"]
precision <- cm$byClass["Precision"]
recall <- cm$byClass["Recall"]
kappa <- cm$overall["Kappa"]
lift <- precision/(nPos/(nPos+nNeg))
auc <- ( 1 + sensitivity - (1 - specificity) ) / 2    # (1 + vp - fp) / 2
gini <- (2 * auc) - 1
rcResponse <- as.factor(ifelse(data2$Real == clasePos, 1, 0))
resHmeasure <- HMeasure(rcResponse, data2$Score)
sc_auc <- resHmeasure$metrics$AUC
sc_gini <- resHmeasure$metrics$Gini
sc_ks <- resHmeasure$metrics$KS
#Metricas para datos no balanceados
fScore <- cm$byClass["F1"]
balanced_accuracy <- cm$byClass["Balanced Accuracy"]
optimized_accuracy <- accuracy - (abs(specificity-recall)/(specificity+recall))
mcc <- ((vp*vn)-(fp*fn))/sqrt((vp+fp)*(vp+fn)*(vn+fp)*(vn+fn))
g <- as.numeric(sqrt(sensitivity*specificity))
} else{
#Matriz de confusion
nTot <- 0
pPos <- 0
pNeg <- 0
vp <- 0
vn <- 0
fp <- 0
fn <- 0
#Metricas tradicionales
accuracy <- 0
err <- 1
recall <- 0
specificity <- 0
precision <- 0
lift <- 0
auc <- 0
gini <- 0
# pd_auc <- 0
# pd_gini <- 0
# pd_ks <- 0
sc_auc <- 0
sc_gini <- 0
sc_ks <- 0
#kappa = kappa,
#Métricas para datos no balanceados
fScore <- 0
balanced_accuracy <- 0
optimized_accuracy <- 0
mcc <- 0
g <- 0
}
resMetric <- data.frame(
# grupo = grupo,
# fecha = fecha,
#Matriz de confusion
nTot = nTot,
pPos = round(pPos, 6),
pNeg = round(pNeg, 6),
vp = vp,
vn = vn,
fp = fp,
fn = fn,
#Metricas tradicionales
acc = round(accuracy, 6),
err = round(err, 6),
recall = round(recall, 6),
specificity = round(specificity, 6),
precision = round(precision, 6),
lift = round(lift, 6),
auc = round(auc, 6),
gini = round(gini, 6),
#kappa = kappa,
#Metricas para datos no balanceados
g = round(g, 6),
bal_acc = round(balanced_accuracy, 6),
opt_acc = round(optimized_accuracy, 6),
fScore = round(fScore, 6),
mcc = round(mcc, 6),
#Metricas de Score
sc_auc = round(sc_auc, 6),
sc_gini = round(sc_gini, 6),
sc_ks = round(sc_ks, 6)
#,
#Metricas de Probabilidad de Default
# pd_auc = round(pd_auc, 6),
# pd_gini = round(pd_gini, 6),
# pd_ks = round(pd_ks, 6)
)
rownames(resMetric) <- NULL
ResultadoGrupoMes <- resMetric
}
# Se guarda el modelo y lo necesario para aplicarlo
# save(model, file = "consumaxModel.RData")
# save(cutoff, file = "consumaxCutoff.RData")
# save(bins, file = "consumaxBins.RData")
# save(card, file = "consumaxCard.RData")
# Backtesting propio del Scorecard
# card <- scorecard(bins, model)
# train_score <- scorecard_ply(ds_Train, card, only_total_score=FALSE)
# test_score <-  scorecard_ply(ds_Test, card, only_total_score=FALSE)
# Calibrado de datos
PDO <- 48 # 50 40
POINT0 <- 570 # 600 500
card <- scorecard(bins, model, points0 = POINT0, odds0 = 1/19, pdo = PDO)
train_score <- scorecard_ply(ds_Train, card, only_total_score=FALSE)
test_score <-  scorecard_ply(ds_Test, card, only_total_score=FALSE)
# test_score <- test_score %>% mutate( COD_PROFESION_points = ifelse( !is.na(COD_PROFESION_points), COD_PROFESION_points, 0 ), score = ifelse ( !is.na(score), score , (ESTADO_CIVIL_points + ANTIGUEDAD_LABORAL_points + CARGO_points + TIPO_VIVIENDA_points + GENERO_points + INGRESOS_GASTOS_points + CUOTA_ING_NETO_points + 0 + DEPARTAMENTO_points + TOT_PASIVOS_points + NRO_CUOTAS_points + PASIVO_ACTIVO_points) ) ) %>%
#   mutate( score = ifelse( score < 300, 300, ifelse( score > 850, 850, score ) ) )
# range(train_score$score)
# range(test_score$score, na.rm = TRUE)
# range(range(train_score$score), range(test_score$score, na.rm = TRUE))
# card$COD_PROFESION
# Backtesting Train
# dataTrainBt <- data.frame( Real = train$DEFAULT, Pred = pred_train, Score = train_score$score  )
# metricasTrain <- ResultadoGrupoMes( dataTrainBt, clasePos = "1" )
# # table(dataTrainBt$Real)
# # write.table( dataTrainBt %>% select(Real,Score), file = "métricas//6taIteracionResultadosTrain.csv", sep = ";", quote = FALSE, row.names = FALSE  )
saldo_promedio <- round(mean((ds_Train_base %>% filter( !is.na(SALDO) ))$SALDO),2)
SaldoPromDefault <- (ds_Train_base %>% mutate( SaldoProm = ifelse( !is.na(SALDO) , saldo_promedio , NA )) %>% select(SaldoProm))$SaldoProm
dataTrainBt <- data.frame( Real = train$DEFAULT, Pred = pred_train, Score = train_score$score, Saldo = ds_Train_base$SALDO, SaldoProm = SaldoPromDefault, Operacion = ds_Train_base$OPERACION, LogitProb = pred_train_log )
metricasTrain <- ResultadoGrupoMes( dataTrainBt, clasePos = "1" ) %>%
select(nTot, pPos, pNeg, vp, vn, fp, fn, sc_gini, sc_ks, sc_auc)
# write.table( dataTrainBt %>% select(Real,Score,Saldo,SaldoProm,Operacion,LogitProb), file = "métricas//6taIteracionResultadosTrainConSaldo.csv", sep = ";", quote = FALSE, row.names = FALSE, na = "")
#Identificación anomalías en Train
# str(dataTrainBt)
# (dataTrainBt %>% filter(Score > 550, Real == 1))$Operacion
# auxDsTrain <- ds_Train %>% filter( OPERACION %in% (dataTrainBt %>% filter(Score > 550, Real == 1))$Operacion )
# scorecard_ply(auxDsTrain, card, only_total_score=FALSE) %>% as.data.frame() %>% arrange(desc(score))
# auxDsTrain %>% select( COD_PROFESION, TOT_ACTIVOS)
# auxDsTrain %>% select( COD_PROFESION) %>% distinct() %>% arrange( COD_PROFESION )
dataGraficoTrain <- dataTrainBt %>% mutate( Real = ifelse( Real == 1 , "Default", "Vigente" ) )
tituloGraficoTrain <- paste0("Conjunto de datos de Entrenamiento") # "Backtesting - DataSet Train"
rangoIni <- 300 # 300
rangoFin <- 850 # 850
# range(dataGraficoTrain$Score)
ggplot(dataGraficoTrain, aes(x = Score)) +
scale_color_manual(values = c("#FF0000","#008000")) +
scale_fill_manual(values = c("#FF0000","#008000")) +
geom_density(aes(fill = Real), alpha = 0.3) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle( tituloGraficoTrain ) +
ylab("Densidad") +
xlab("Score") +
labs(fill = "Estado Real") +
scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
coord_cartesian(xlim = c(rangoIni, rangoFin))
# ggplot(dataGraficoTrain,aes(x=Score,fill=Real)) + #y=value,
#   geom_bar(stat="bin",position="dodge") +
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   geom_density(aes(fill = Real), alpha = 0.3) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( tituloGraficoTrain ) +
#   ylab("Número de operaciones") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
#   coord_cartesian(xlim = c(rangoIni, rangoFin))
# ggplot(dataGraficoTrain %>% filter(!is.na(Saldo)) ,aes(x = Score, y = Saldo, fill = Real)) + #y=value,
#   geom_bar(stat="identity") + #stat="sum" ,position="dodge"
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( tituloGraficoTrain ) +
#   ylab("Saldo de operaciones en Default") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
#   coord_cartesian(xlim = c(rangoIni, rangoFin))
# Backtesting Test
# dataTestBt <- data.frame( Real = test$DEFAULT, Pred = pred_test, Score = test_score$score  )
# metricasTest <- ResultadoGrupoMes( dataTestBt, clasePos = "1" )
# # table(dataTestBt$Real)
# # write.table( dataTestBt %>% select(Real,Score) %>% filter(!is.na(Score)), file = "métricas//6taIteracionResultadosTest.csv", sep = ";", quote = FALSE, row.names = FALSE  )
saldo_promedio <- round(mean((ds_Test %>% filter( !is.na(SALDO) ))$SALDO),2)
SaldoPromDefault <- (ds_Test %>% mutate( SaldoProm = ifelse( !is.na(SALDO) , saldo_promedio , NA )) %>% select(SaldoProm))$SaldoProm
dataTestBt <- data.frame( Real = test$DEFAULT, Pred = pred_test, Score = test_score$score, Saldo = ds_Test$SALDO, SaldoProm = SaldoPromDefault, Operacion = ds_Test$OPERACION, LogitProb = pred_test_log )
metricasTest <- ResultadoGrupoMes( dataTestBt, clasePos = "1" ) %>%
select(nTot, pPos, pNeg, vp, vn, fp, fn, sc_gini, sc_ks, sc_auc)
# write.table( dataTestBt %>% select(Real,Score,Saldo,SaldoProm,Operacion,LogitProb), file = "métricas//6taIteracionResultadosTestConSaldo.csv", sep = ";", quote = FALSE, row.names = FALSE, na = "")
#Identificación anomalías en Test
# str(dataTestBt)
# (dataTestBt %>% filter(Score > 500, Real == 1))$Operacion
# auxDsTest <- ds_Test %>% filter( OPERACION %in% (dataTestBt %>% filter(Score > 500, Real == 1))$Operacion )
# scorecard_ply(auxDsTest, card, only_total_score=FALSE) %>% as.data.frame() %>% arrange(desc(score))
dataGraficoTest <- dataTestBt %>% mutate( Real = ifelse( Real == 1 , "Default", "Vigente" ) )
tituloGraficoTest <- paste0("Conjunto de datos de Prueba")
rangoIni <- 300 # 300 200
rangoFin <- 850 # 850 900
# tituloGraficoTest <- "Logit - Scorecard - Periodo de 14 meses"
# range(dataGraficoTest$Score)
ggplot(dataGraficoTest, aes(x = Score)) +
scale_color_manual(values = c("#FF0000","#008000")) +
geom_density(aes(fill = Real), alpha = 0.3) +
scale_fill_manual(values = c("#FF0000","#008000")) +
ggtitle( tituloGraficoTest ) +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Densidad") +
xlab("Score") +
labs(fill = "Estado Real") +
scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
coord_cartesian(xlim = c(rangoIni, rangoFin))
# ggplot(dataGraficoTest,aes(x=Score,fill=Real)) + #y=value,
#   geom_bar(stat="bin",position="dodge") +
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   geom_density(aes(fill = Real), alpha = 0.3) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( tituloGraficoTest ) +
#   ylab("Número de operaciones") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
#   coord_cartesian(xlim = c(rangoIni, rangoFin))
# ggplot(dataGraficoTest %>% filter(!is.na(Saldo)) ,aes(x = Score, y = Saldo, fill = Real)) + #y=value,
#   geom_bar(stat="identity") + #stat="sum" ,position="dodge"
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( tituloGraficoTest ) +
#   ylab("Saldo de operaciones en Default") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(rangoIni, rangoFin, by = 50), limits = c(rangoIni, rangoFin)) +
#   coord_cartesian(xlim = c(rangoIni, rangoFin))
metricasTrain
metricasTest
# Prueba con el total
dataTotal <- read.csv("tarjetaDatosEtiquetadosConSaldos36meses90dias.csv", sep = "|", dec = ".", stringsAsFactors = FALSE)
dataTotal <- dataTotal %>%
# mutate( PASIVO_ACTIVO = ifelse(TOT_PASIVOS > 0 & TOT_ACTIVOS > 0, round(TOT_PASIVOS / TOT_ACTIVOS,2), 0) ) %>%
mutate( NIVEL_INGRESO = ifelse( NIVEL_INGRESO == "", "NO INDICADO", NIVEL_INGRESO  ) ) %>%
select( EDAD, NIVEL_EDUCACION, ANTIGUEDAD_LABORAL, GENERO, MONTO_OPERACION, INGRESOS_GASTOS, COD_PROFESION, DEPARTAMENTO, TOT_ACTIVOS, NIVEL_INGRESO, DEFAULT, SALDO, OPERACION )
# dataTotal <- data
# total <- woebin_ply(dataTotal, bins)
# pred_Total_log <- predict(model, newdata = total, type='response')
# pred_Total_obj <- prediction(pred_Total_log, total$DEFAULT)
# pred_Total <- ifelse(pred_Total_log > cutoff, 1, 0)
dataTotal_score <- scorecard_ply(dataTotal, card, only_total_score = FALSE)
# Se agrega el Score al conjunto de datos y se reemplaza COD_PROFESION_points NA con 0
# dataTotal_score %>% filter( is.na(COD_PROFESION_points) | is.na(score) )
dataTotal_score <- dataTotal_score %>% mutate( COD_PROFESION_points = ifelse( !is.na(COD_PROFESION_points), COD_PROFESION_points, 0 ), score = ifelse ( !is.na(score), score , (card$basepoints$points + EDAD_points + NIVEL_EDUCACION_points + ANTIGUEDAD_LABORAL_points + GENERO_points + MONTO_OPERACION_points + INGRESOS_GASTOS_points + 0 + DEPARTAMENTO_points + TOT_ACTIVOS_points + NIVEL_INGRESO_points) ) )
dataTotal <- dataTotal %>% cbind( data.frame(score = dataTotal_score$score) )
# Se ajustan los outliers con Score < 300 > 850
# dataTotal <- dataTotal %>% mutate( score = ifelse( score < 300, 300, ifelse( score > 850, 850, score ) ) )
# dataTotalBt <- data.frame( Real = dataTotal$DEFAULT, Pred = dataTotal$DEFAULT, Score = dataTotal$score )
# # write.table( dataTotalBt %>% select(Real,Score), file = "métricas//6taIteracionResultadosTotal.csv", sep = ";", quote = FALSE, row.names = FALSE  )
# # dataTotalBt %>% nrow()
# # dataTotalBt %>% filter( Score <= 300, Real ==  0) %>% nrow()
# saldo_promedio <- round(mean((dataTotal %>% filter( !is.na(SALDO) ))$SALDO),2)
# SaldoPromDefault <- (dataTotal %>% mutate( SaldoProm = ifelse( !is.na(SALDO) , saldo_promedio , NA )) %>% select(SaldoProm))$SaldoProm
dataTotalBt <- data.frame( Real = dataTotal$DEFAULT, Pred = dataTotal$DEFAULT, Score = dataTotal$score, Saldo = dataTotal$SALDO, Operacion = dataTotal$OPERACION, LogitProb = 1 ) # , SaldoProm = SaldoPromDefault, LogitProb = pred_Total_log
# write.table( dataTotalBt %>% select(Real,Score,Saldo,SaldoProm,Operacion,LogitProb), file = "métricas//6taIteracionResultadosTotalConSaldo.csv", sep = ";", quote = FALSE, row.names = FALSE, na = "")
metricasTotal <- ResultadoGrupoMes( dataTotalBt, clasePos = "1" ) %>%
select(nTot, pPos, pNeg, vp, vn, fp, fn, sc_gini, sc_ks, sc_auc)
dataTotalGrafico <- dataTotalBt %>% mutate( Real = ifelse( Real == 1 , "Default", "Vigente" ) )
ggplot(dataTotalGrafico, aes(x = Score)) +
scale_color_manual(values = c("#FF0000","#008000")) +
geom_density(aes(fill = Real), alpha = 0.3) +
scale_fill_manual(values = c("#FF0000","#008000")) +
ggtitle( "Conjunto de datos de Tarjetas - Vista Minable" ) +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Densidad") +
labs(fill = "Estado Real") +
scale_x_continuous(breaks = seq(300, 850, by = 50), limits = c(300, 850)) +
coord_cartesian(xlim = c(300, 850)) # + expand_limits(x = 0, y = 0)
# ggplot(dataTotalGrafico,aes(x=Score,fill=Real)) + #y=value,
#   geom_bar(stat="bin",position="dodge") +
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( "Conjunto de datos de Tarjetas - Vista Minable" ) +
#   ylab("Número de operaciones") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(300, 850, by = 50), limits = c(300, 850)) +
#   coord_cartesian(xlim = c(300, 850))
# ggplot(dataTotalGrafico %>% filter(!is.na(Saldo)) ,aes(x = Score, y = Saldo, fill = Real)) + #y=value,
#   geom_bar(stat="identity") + #stat="sum" ,position="dodge"
#   theme_bw() +
#   scale_color_manual(values = c("#FF0000","#008000")) +
#   scale_fill_manual(values = c("#FF0000","#008000")) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   ggtitle( "Conjunto de datos Consumax - Vista Minable" ) +
#   ylab("Saldo de operaciones en Default") +
#   xlab("Score") +
#   labs(fill = "Estado Real") +
#   scale_x_continuous(breaks = seq(300, 850, by = 50), limits = c(300, 850)) +
#   coord_cartesian(xlim = c(300, 850))
metricasTrain
metricasTest
metricasTotal
range(dataTrainBt$Score)
range(dataTestBt$Score)
range(dataTotalGrafico$Score)
ggplot(dataTotalGrafico, aes(x = Score)) +
scale_color_manual(values = c("#FF0000","#008000")) +
geom_density(aes(fill = Real), alpha = 0.3) +
scale_fill_manual(values = c("#FF0000","#008000")) +
ggtitle( "Conjunto de datos de Tarjetas - Vista Minable" ) +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Densidad") +
labs(fill = "Estado Real") +
scale_x_continuous(breaks = seq(300, 850, by = 50), limits = c(300, 850)) +
coord_cartesian(xlim = c(300, 850)) # + expand_limits(x = 0, y = 0)
rm(list = ls())
library(openxlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(GoodmanKruskal)
library(FSelector)
setwd('D://DatosBGA//ScoreAdmisionTarjetas//02-DatosAdmision')
options(scipen=999)
dataAdmision <- read.csv("D://DatosBGA//ScoreAdmisionTarjetas//01-DatosBase//Analisis_Prestamos (Admision) V2.csv", sep = "|", dec = ".")
str(dataAdmision)
dataAdmision <- dataAdmision %>% mutate( FECHA_INICIO = as.Date(FECHA_INICIO, format = "%d/%m/%Y") )
colFactor <- c("ESTADO_CIVIL", "NIVEL_EDUCACION", "CARGO", "TIPO_VIVIENDA", "GENERO", "FUENTE_INGRESO", "SECTOR_ECONOMICO", "COD_PROFESION", "SUCURSAL", "CAEDEC", "PRODUCTO", "PROFESION", "DEPARTAMENTO", "GRUPO_CAEDEC", "NIVEL_INGRESO", "DESC_PRODUCTO", "TIPO_OPR")
dataAdmision[colFactor] <- lapply(dataAdmision[colFactor], factor)
dataAdmision <- dataAdmision %>% mutate( SEGMENTO = ifelse( grepl("CONSUMAX|TARJETA", DESC_PRODUCTO, ignore.case = T) & !grepl("EMPRESA|PYME|MYPE|MICRO|HIP|VIV", DESC_PRODUCTO, ignore.case = T), "CONSUMO", "OTRO") )
dataAdmision <- dataAdmision %>% mutate( SEGMENTO = ifelse( SEGMENTO == "OTRO", SEGMENTO, ifelse( grepl("CONSUMAX", DESC_PRODUCTO, ignore.case = T), "CONSUMAX", "TARJETA" ) ) )
dataConsumo <- dataAdmision %>% filter( SEGMENTO != "OTRO")
save(dataConsumo, file = "dataConsumo.RData")
dataConsumo <- dataConsumo %>% arrange( OPERACION, FECHA_INICIO, desc(MONTO_OPERACION) )
idxRegistrosUnicos <- c()
listaOperacionesUnicas <- c()
for( i in 1:nrow(dataConsumo) ) { # 1:100
current_OPERACION <- dataConsumo [i, c("OPERACION")]
existeEnConsumoUnico <- current_OPERACION %in% listaOperacionesUnicas
if( existeEnConsumoUnico == FALSE ) {
idxRegistrosUnicos <- c(idxRegistrosUnicos, i)
listaOperacionesUnicas <- c(listaOperacionesUnicas, current_OPERACION)
}
}
dataConsumoUnico <- dataConsumo[idxRegistrosUnicos,]
dataConsumoUnico %>% select( OPERACION ) %>% distinct() %>% nrow()
dataConsumoUnico %>% nrow()
save(dataConsumoUnico, file = "dataConsumoUnico.RData")
load("dataConsumoUnico.RData")
mesesLabel <- c("Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic")
datosParaConteo <- dataConsumoUnico %>%
filter( is.na(FECHA_INICIO) == FALSE ) %>%
mutate( FECHA_ANIO = year(FECHA_INICIO), FECHA_NUM = (year(FECHA_INICIO) * 100) + month(FECHA_INICIO), FECHA_LABEL = paste0(year(FECHA_INICIO) , "-" , mesesLabel[month(FECHA_INICIO)] ) ) %>%
select( FECHA_ANIO, FECHA_INICIO, FECHA_NUM, FECHA_LABEL, SEGMENTO, OPERACION )
conteoTotal <- datosParaConteo %>% group_by( FECHA_ANIO, FECHA_NUM, FECHA_LABEL ) %>% summarise( numOpTotal = n() )
conteoConsumax <- datosParaConteo %>% filter( SEGMENTO == "CONSUMAX") %>% group_by( FECHA_ANIO, FECHA_NUM, FECHA_LABEL ) %>% summarise( numOpConsumax = n() )
conteoTarjeta <- datosParaConteo %>% filter( SEGMENTO == "TARJETA") %>% group_by( FECHA_ANIO, FECHA_NUM, FECHA_LABEL ) %>% summarise( numOpTarjeta = n() )
conteobase0 <- left_join( conteoTotal, conteoConsumax, by = c("FECHA_ANIO", "FECHA_NUM", "FECHA_LABEL") )
conteobase1 <- left_join( conteobase0, conteoTarjeta, by = c("FECHA_ANIO", "FECHA_NUM", "FECHA_LABEL") )
conteobase2 <- conteobase1 %>% as.data.frame() %>% mutate_all(~replace(., is.na(.), 0)) %>% arrange( FECHA_NUM )
conteobase3 <- conteobase2 %>% group_by( FECHA_ANIO ) %>% summarise( numOpTotal = sum(numOpTotal), numOpConsumax = sum(numOpConsumax), numOpTarjeta = sum(numOpTarjeta) ) %>% as.data.frame()
parcial1 <- conteobase3 %>% mutate ( ANIO = FECHA_ANIO, TIPO = "TOTAL", NUM_OPS = numOpTotal ) %>% select ( ANIO, TIPO, NUM_OPS )
parcial2 <- conteobase3 %>% mutate ( ANIO = FECHA_ANIO, TIPO = "CONSUMAX", NUM_OPS = numOpConsumax ) %>% select ( ANIO, TIPO, NUM_OPS )
parcial3 <- conteobase3 %>% mutate ( ANIO = FECHA_ANIO, TIPO = "TARJETA", NUM_OPS = numOpTarjeta ) %>% select ( ANIO, TIPO, NUM_OPS )
conteobase4 <- rbind( parcial3, rbind( parcial1, parcial2 ) )
conteobase2 %>% filter( FECHA_NUM >= 201510, FECHA_NUM <= 201905)
ggplot(conteobase4, aes(x = ANIO, y = NUM_OPS)) +
geom_line(aes(color = TIPO)) +  # , linetype = variable
theme_bw()+
ggtitle("Número de operaciones por año") +
scale_x_continuous(breaks = seq(1997, 2020, by = 1), limits = c(1997, 2020)) +
scale_color_manual(values = c("blue", "green", "black")) +
theme(axis.text.x = element_text(angle = 90))
OperacionesTarjeta <- datosParaConteo %>% filter( SEGMENTO == "TARJETA", FECHA_NUM >= 201510, FECHA_NUM <= 201905) %>% select( OPERACION )
write.table( OperacionesTarjeta, file = "OperacionesTarjeta.csv", sep = ";", dec = ".", quote = FALSE, row.names = FALSE )
deMeses <- 36 # 18 24 36
deDiasMora <- 90
datosEtiquetadosTarjeta <- read.csv( paste0("tarjetaOperacionesEtiquetadasConSaldos",deMeses,"meses",deDiasMora,"dias.csv"), sep = ";", dec = ".", stringsAsFactors = FALSE)
datosEtiquetadosTarjeta <- datosEtiquetadosTarjeta %>%
mutate( OPERACION = as.numeric(numOp) , DEFAULT = estado, SALDO = SALDO_ORI, NRO_MES_DEFAULT = NroMesCicloOp ) %>%
mutate( numOp = NULL, estado = NULL, # MONEDA = NULL, TC_FECHA_OP = NULL,
DIAS_MORA = NULL, ESTADO = NULL, FECHA_PROCESO = NULL, NroMesCicloOp = NULL, SALDO_ORI = NULL)
dataTarjetaEtiquetada <- inner_join( dataConsumoUnico, datosEtiquetadosTarjeta, by = c("OPERACION"), copy = FALSE )
deMeses <- 36 # 18 24 36
deDiasMora <- 90
datosEtiquetadosTarjeta <- read.csv( paste0("D://DatosBGA//ScoreAdmisionTarjetas//03-DefinicionDefault//tarjetaOperacionesEtiquetadasConSaldos",deMeses,"meses",deDiasMora,"dias.csv"), sep = ";", dec = ".", stringsAsFactors = FALSE)
datosEtiquetadosTarjeta <- datosEtiquetadosTarjeta %>%
mutate( OPERACION = as.numeric(numOp) , DEFAULT = estado, SALDO = SALDO_ORI, NRO_MES_DEFAULT = NroMesCicloOp ) %>%
mutate( numOp = NULL, estado = NULL, # MONEDA = NULL, TC_FECHA_OP = NULL,
DIAS_MORA = NULL, ESTADO = NULL, FECHA_PROCESO = NULL, NroMesCicloOp = NULL, SALDO_ORI = NULL)
dataTarjetaEtiquetada <- inner_join( dataConsumoUnico, datosEtiquetadosTarjeta, by = c("OPERACION"), copy = FALSE )
write.table(dataTarjetaEtiquetada, file = paste0("tarjetaDatosEtiquetadosConSaldos", deMeses,"meses", deDiasMora,"dias.csv"), sep = "|", dec = ".", quote = FALSE, row.names = FALSE, na = "" )
deMeses <- 18 # 18 24 36
deDiasMora <- 90
datosEtiquetadosTarjeta <- read.csv( paste0("D://DatosBGA//ScoreAdmisionTarjetas//03-DefinicionDefault//tarjetaOperacionesEtiquetadasConSaldos",deMeses,"meses",deDiasMora,"dias.csv"), sep = ";", dec = ".", stringsAsFactors = FALSE)
# str(datosEtiquetadosTarjeta)
datosEtiquetadosTarjeta <- datosEtiquetadosTarjeta %>%
mutate( OPERACION = as.numeric(numOp) , DEFAULT = estado, SALDO = SALDO_ORI, NRO_MES_DEFAULT = NroMesCicloOp ) %>%
mutate( numOp = NULL, estado = NULL, # MONEDA = NULL, TC_FECHA_OP = NULL,
DIAS_MORA = NULL, ESTADO = NULL, FECHA_PROCESO = NULL, NroMesCicloOp = NULL, SALDO_ORI = NULL)
dataTarjetaEtiquetada <- inner_join( dataConsumoUnico, datosEtiquetadosTarjeta, by = c("OPERACION"), copy = FALSE )
# str(dataTarjetaEtiquetada)
write.table(dataTarjetaEtiquetada, file = paste0("tarjetaDatosEtiquetadosConSaldos", deMeses,"meses", deDiasMora,"dias.csv"), sep = "|", dec = ".", quote = FALSE, row.names = FALSE, na = "" )
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(ggplot2)
rm(list = ls())
dirWD <- "D://DatosBGA//ScoreAdmisionTarjetas//03-DefinicionDefault"
setwd(dirWD)
#### Datos de Cartera ####
datosCartera1 <- data.frame()
archivosCartera1 <- c("Asfi510_11_2017.csv", "Asfi510_12_2017.csv", "Asfi510_01_2018.csv", "Asfi510_02_2018.csv", "Asfi510_03_2018.csv", "Asfi510_04_2018.csv", "Asfi510_05_2018.csv", "Asfi510_06_2018.csv", "Asfi510_07_2018.csv", "Asfi510_08_2018.csv", "Asfi510_09_2018.csv", "Asfi510_10_2018.csv", "Asfi510_11_2018.csv", "Asfi510_12_2018.csv", "Asfi510_01_2019.csv", "Asfi510_02_2019.csv", "Asfi510_03_2019.csv", "Asfi510_04_2019.csv", "Asfi510_05_2019.csv", "Asfi510_06_2019.csv", "Asfi510_07_2019.csv", "Asfi510_08_2019.csv", "Asfi510_09_2019.csv", "Asfi510_10_2019.csv", "Asfi510_11_2019.csv", "Asfi510_12_2019.csv", "Asfi510_01_2020.csv", "Asfi510_02_2020.csv", "Asfi510_03_2020.csv", "Asfi510_04_2020.csv")
for (nombreArchivo1 in archivosCartera1) {
archivoCartera1 <- paste0("D://DatosBGA//ScoreAdmisionTarjetas//01-DatosBase//Asfi510-Nov17-Abr20//",nombreArchivo1)
datosArchivoCartera1 <- read.csv( archivoCartera1, sep = '|', dec = ".", stringsAsFactors=FALSE )
if( nrow(datosCartera1) == 0 ) {
datosCartera1 <- datosArchivoCartera1
} else {
datosCartera1 <- rbind(datosCartera1, datosArchivoCartera1)
}
}
datosCartera1 <- datosCartera1 %>% mutate(
FECHA_PROCESO = as.Date(FECHA_PROCESO, format="%d/%m/%Y"),
FECHAOP = as.Date(FECHAOP, format="%d/%m/%Y"),
FECHA_PROX_PAGO_INT = as.Date(FECHA_PROX_PAGO_INT, format="%d/%m/%Y"),
FECHA_VTO_FINAL = as.Date(FECHA_VTO_FINAL, format="%d/%m/%Y"),
CODIGO_ASFI510 = NULL,
FECHA_PROCESO_1 = NULL
)
datosCartera2 <- data.frame()
archivosCartera2 <- c("Asfi510_10_2015.csv", "Asfi510_11_2015.csv", "Asfi510_12_2015.csv", "Asfi510_01_2016.csv", "Asfi510_02_2016.csv", "Asfi510_03_2016.csv", "Asfi510_04_2016.csv", "Asfi510_05_2016.csv", "Asfi510_06_2016.csv", "Asfi510_07_2016.csv", "Asfi510_08_2016.csv", "Asfi510_09_2016.csv", "Asfi510_10_2016.csv", "Asfi510_11_2016.csv", "Asfi510_12_2016.csv", "Asfi510_01_2017.csv", "Asfi510_02_2017.csv", "Asfi510_03_2017.csv", "Asfi510_04_2017.csv", "Asfi510_05_2017.csv", "Asfi510_06_2017.csv", "Asfi510_07_2017.csv", "Asfi510_08_2017.csv", "Asfi510_09_2017.csv", "Asfi510_10_2017.csv")
for (nombreArchivo2 in archivosCartera2) {
archivoCartera2 <- paste0("D://DatosBGA//ScoreAdmisionTarjetas//01-DatosBase//Asfi510-Oct15-Oct17//", nombreArchivo2)
datosArchivoCartera2 <- read.csv( archivoCartera2, sep = '|', dec = ".", stringsAsFactors=FALSE )
if( nrow(datosCartera2) == 0 ) {
datosCartera2 <- datosArchivoCartera2
} else {
datosCartera2 <- rbind(datosCartera2, datosArchivoCartera2)
}
}
datosCartera2 <- datosCartera2 %>% mutate(
FECHA_PROCESO = as.Date(FECHA_PROCESO, format="%d/%m/%Y"),
FECHAOP = as.Date(FECHAOP, format="%d/%m/%Y"),
FECHA_PROX_PAGO_INT = as.Date(FECHA_PROX_PAGO_INT, format="%d/%m/%Y"),
FECHA_VTO_FINAL = as.Date(FECHA_VTO_FINAL, format="%d/%m/%Y")
)
datosCartera <- rbind(datosCartera1, datosCartera2)
save(datosCartera, file = "datosCartera.RData")
mesesNum <- c(Ene="01",Feb="02",Mar="03",Abr="04",May="05",Jun="06",Jul="07",Ago="08",Sep="09",Oct="10",Nov="11",Dic="12")
archivoOpAdmision <- "D://DatosBGA//ScoreAdmisionTarjetas//02-DatosAdmision//OperacionesTarjeta.csv"
datosOpAdmision <- read.csv( archivoOpAdmision )
datosOpAdmision$OPERACION <- as.numeric(datosOpAdmision$OPERACION)
save(datosOpAdmision, file = "datosOpAdmision.RData")
